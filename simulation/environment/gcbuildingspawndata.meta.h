/**
 * @file gcbuildingspawndata.meta.h
 * @author VITALISED & Contributors
 * @since 2023-12-06
 * @version v101236
 * @brief This file is autogenerated metadata created by Heridium for ReNMS. You shouldn't need to modify this, see https://github.com/VITALISED/renms.
 *
 * Copyright (C) 2023  VITALISED & Contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <toolkit/data/TkMetaDataClasses.h>
#include <utilities/data/gcresourceelement.meta.h>
#include <simulation/environment/gcbuildingclassification.meta.h>
#include <toolkit/voxel/generator/tknoiseflattenoptions.meta.h>

SKYSCRAPER_BEGIN

/**
 * @class cGcBuildingSpawnData
 */
class cGcBuildingSpawnData : cTkMetaData::Registrar<cGcBuildingSpawnData>, cTkMetaDataXML::Registrar<cGcBuildingSpawnData>
{
  public:
    enum
    {
        mu64ClassNameHash = 0x2FE28DE7841506AF,
    };
    enum
    {
        mu64TemplateHash = 0xFFDC604437C8CD16,
    };

    float mfDensity;
    cGcResourceElement Resource;
    int miLSystemID;
    int miWFCModuleSet;
    int miWFCBuildingPreset;
    bool mbAutoCollision;
    cTkSeed mSeed;
    cGcBuildingClassification Classification;
    cTkFixedArray<int, 8> maClusterLayouts;
    int miClusterLayoutCount;
    float mfClusterSpacing;
    cTkNoiseFlattenOptions FlattenType;
    bool mbGivesShelter;
    bool mbAlignToNormal;
    bool mbLowerIntoGround;
    float mfScale;
    float mfMaxXZRotation;
    float mfRadius;
    float mfMinHeight;
    float mfMaxHeight;
    int miInstanceID;
    cTkVector3 mAABBMin;
    cTkVector3 mAABBMax;
    bool mbBuildingSizeCalculated;
    bool mbIgnoreParticlesAABB;
};

SKYSCRAPER_END
