/**
 * @file gclaserbeamdata.meta.h
 * @author VITALISED & Contributors
 * @since 2023-12-24
 * @version v101236
 * @brief This file is autogenerated metadata created by Heridium for ReNMS. You shouldn't need to modify this, see https://github.com/VITALISED/renms.
 *
 * Copyright (C) 2023  VITALISED & Contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <toolkit/data/TkMetaDataClasses.h>
#include <audio/gcaudiowwiseevents.meta.h>
#include <simulation/projectiles/gcdamagetype.meta.h>
#include <simulation/projectiles/gcprojectileimpactdata.meta.h>
#include <gameplay/gcimpactcombateffectdata.meta.h>
#include <simulation/projectiles/gccombateffectdamagemultiplier.meta.h>

SKYSCRAPER_BEGIN

/**
 * @class cGcLaserBeamData
 */
class cGcLaserBeamData
{
  public:
    enum
    {
        ClassNameHash = 0x1AA966F8BA4E3153,
    };

    inline cGcLaserBeamData() {}
    cGcLaserBeamData* Cast(cTkClassPointer* lClassPtr);

    union
    {
        struct
        {
            TkID<128> mId;
            cTkFixedString<128,char> macBeamFile;
            cTkFixedString<128,char> macBeamCoreFile;
            float mfWidth;
            float mfHitWidth;
            float mfPulseFrequency;
            float mfPulseAmplitude;
            float mfStartTime;
            float mfEndTime;
            cGcAudioWwiseEvents AudioStart;
            cGcAudioWwiseEvents AudioStop;
            cGcAudioWwiseEvents AudioOverheat;
            int miDefaultDamage;
            float mfExtraPlayerDamage;
            cGcDamageType DamageType;
            float mfCriticalHitModifier;
            TkID<128> mPlayerDamage;
            TkID<128> mImpactEffect;
            cTkDynamicArray<cGcProjectileImpactData> maImpacts;
            float mfHitRate;
            bool mbSingleHit;
            float mfRagdollPush;
            float mfPhysicsPush;
            float mfMiningHitRate;
            bool mbHasLight;
            bool mbCanMine;
            bool mbApplyCombatLevelMultipliers;
            float mfDroneImpulse;
            float mfPiercingDamagePercentage;
            float mfLightIntensity;
            cTkColour mLightColour;
            cTkColour mColour;
            cTkVector3 mImpactOffset;
            cTkDynamicArray<cGcImpactCombatEffectData> maCombatEffectsOnImpact;
            cTkDynamicArray<cGcCombatEffectDamageMultiplier> maCombatEffectDamageMultipliers;
        };
    };
};

SKYSCRAPER_END
