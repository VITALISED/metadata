/**
 * @file gcusersettingsdata.meta.h
 * @author VITALISED & Contributors
 * @since 2023-12-15
 * @version v101236
 * @brief This file is autogenerated metadata created by Heridium for ReNMS. You shouldn't need to modify this, see https://github.com/VITALISED/renms.
 *
 * Copyright (C) 2023  VITALISED & Contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <toolkit/data/TkMetaDataClasses.h>
#include <user/gcblocklistpersistence.meta.h>
#include <simulation/player/gcmovementdirection.meta.h>
                #include <user/gcgyrosettingsdata.meta.h>
#include <toolkit/tklanguages.meta.h>
#include <simulation/player/gchand.meta.h>
#include <ui/hud/gcinworlduiscreendata.meta.h>

SKYSCRAPER_BEGIN

/**
 * @enum ePS4FixedFPS
 */
enum ePS4FixedFPS : uint32_t
{
    EPS4FixedFPS_Invalid = 0,
    EPS4FixedFPS_False = 1,
    EPS4FixedFPS_True = 2,
};

/**
 * @enum eBaseSharingMode
 */
enum eBaseSharingMode : uint32_t
{
    EBaseSharingMode_Undecided = 0,
    EBaseSharingMode_On = 1,
    EBaseSharingMode_Off = 2,
};

/**
 * @enum eTemperatureUnit
 */
enum eTemperatureUnit : uint32_t
{
    ETemperatureUnit_Invalid = 0,
    ETemperatureUnit_C = 1,
    ETemperatureUnit_F = 2,
    ETemperatureUnit_K = 3,
};

/**
 * @enum eMovementMode
 */
enum eMovementMode : uint32_t
{
    EMovementMode_Teleporter = 0,
    EMovementMode_Smooth = 1,
};

/**
 * @enum eTurnMode
 */
enum eTurnMode : uint32_t
{
    ETurnMode_Smooth = 0,
    ETurnMode_Snap = 1,
};

/**
 * @enum eUIColourScheme
 */
enum eUIColourScheme : uint32_t
{
    EUIColourScheme_Default = 0,
    EUIColourScheme_Protanopia = 1,
    EUIColourScheme_Deuteranopia = 2,
    EUIColourScheme_Tritanopia = 3,
};

/**
 * @enum eSpaceCombatFollowMode
 */
enum eSpaceCombatFollowMode : uint32_t
{
    ESpaceCombatFollowMode_Disabled = 0,
    ESpaceCombatFollowMode_Hold = 1,
    ESpaceCombatFollowMode_Toggle = 2,
};

/**
 * @enum eEyeTrackingFlags
 */
enum exEyeTrackingFlags : uint32_t
{
FEyeTrackingFlags_BaseBuilding = 1,
FEyeTrackingFlags_WristMenus = 2,
FEyeTrackingFlags_LookVector = 4,
FEyeTrackingFlags_BinocScanner = 8,
};

/**
 * @enum eHighResVRUI
 */
enum eHighResVRUI : uint32_t
{
    EHighResVRUI_High = 0,
    EHighResVRUI_Low = 1,
};

/**
 * @class cGcUserSettingsData
 */
class cGcUserSettingsData
{
  public:
    enum
    {
        ClassNameHash = 0x3A50D683FD1CF4BF,
    };

    union
    {
        struct
        {
            bool mbInvertLookControls;
            bool mbInvertFlightControls;
            bool mbInvertVRInWorldFlightControls;
            bool mbVRVehiclesUseWorldControls;
            bool mbHUDHidden;
            bool mbVibration;
            int miScreenBrightness;
            int miMusicVolume;
            int miSfxVolume;
            int miLookSensitivityMode1;
            int miLookSensitivityMode2;
            int miFlightSensitivityMode1;
            int miFlightSensitivityMode2;
            int miCursorSensitivityMode1;
            int miCursorSensitivityMode2;
            int miMouseSpringSmoothing;
            cGcBlockListPersistence BlockList;
            int miMotionBlurAmount;
            int miFilter;
            bool mbDamageNumbers;
            ePS4FixedFPS PS4FixedFPS;
            float mfPS4FOVFoot;
            float mfPS4FOVShip;
            bool mbXboxOneXHighResolutionMode;
            bool mbPS4VignetteAndScanlines;
            eBaseSharingMode BaseSharingMode;
            cTkDynamicArray<TkID<128>> maSeenSubstances;
            cTkDynamicArray<TkID<128>> maSeenTechnologies;
            cTkDynamicArray<TkID<128>> maSeenProducts;
            cTkDynamicArray<TkID<256>> maSeenWikiTopics;
            cTkDynamicArray<TkID<256>> maUnlockedWikiTopics;
            cTkDynamicArray<TkID<128>> maUnlockedTitles;
            cTkDynamicArray<TkID<128>> maUnlockedSpecials;
            cTkDynamicArray<TkID<128>> maUnlockedSeasonRewards;
            cTkDynamicArray<TkID<128>> maUnlockedTwitchRewards;
            cTkDynamicArray<TkID<128>> maUnlockedPlatformRewards;
            bool mbVoiceChat;
            bool mbMultiplayer;
            bool mbInstantUIInputs;
            bool mbInstantUIDelete;
            bool mbSpeechToText;
            bool mbTranslate;
            bool mbCrossPlatform;
            eTemperatureUnit TemperatureUnit;
            bool mbUseOldMouseFlight;
            int miLastSeenCommunityMission;
            int miLastSeenCommunityMissionTier;
            eMovementMode MovementMode;
            cGcMovementDirection MovementDirectionPad;
            cGcMovementDirection MovementDirectionHands;
            bool mbEnableControllerCursorInVR;
            eTurnMode TurnMode;
            float mfVRVignetteStrength;
            bool mbUseShipAutoControlVignette;
            float mfHUDZoom;
            float mfFrontendZoom;
            bool mbUseAutoTorch;
            eUIColourScheme UIColourScheme;
            bool mbEnableModdingConsole;
            bool mbHeadBob;
            bool mbVRHeadBob;
            bool mbVRShowBody;
            bool mbUseCharacterHeightForCamera;
            bool mbBaseComplexityLimitsEnabled;
            bool mbEnableLargeLobbies;
            int miFireteamSessionCount;
            int miHeadsetVibrationStrength;
            int miVibrationStrength;
            int miCamerShakeStrength;
            int miTriggerFeedbackStrength;
            eSpaceCombatFollowMode SpaceCombatFollowMode;
            cTkDynamicArray<cTkFixedString<128,char>> maUpgradedUsers;
            bool mbAllowWhiteScreenTransitions;
            bool mbAccessibleText;
            bool mbAutoScanDiscoveries;
            bool mbSprintScanSwap;
            bool mbPlaceJumpSwap;
            exEyeTrackingFlags EyeTrackingFlags;
            cGcGyroSettingsData GyroSettings;
            cTkLanguages Language;
            bool mbAutoRotateThirdPersonPlayerCamera;
            cGcHand DominantHand;
            float mfHazardEffectsStrength;
            bool mbQuickMenuBuildMenuSwap;
            eHighResVRUI HighResVRUI;
            float mfPlayerHUDVROffset;
            float mfShipHUDVROffset;
            cGcInWorldUIScreenData QuickMenuLauncherScreenData;
            cGcInWorldUIScreenData VehicleWristMenuScreenData;
            cGcInWorldUIScreenData WeaponMenuScreenData;
            cGcInWorldUIScreenData LargeWeaponMenuScreenData;
        };
    };
};

SKYSCRAPER_END
